from typing import Any, Callable, List


class BinaryNode:
    value: Any
    left_child: 'BinaryNode'
    right_child: 'BinaryNode'

    def __init__(self, value: Any) -> None:
        self.value = value
        self.left_child = None
        self.right_child = None

    def __str__(self) -> str:
        return self.value

    def is_leaf(self) -> bool:
        if self.right_child is None and self.left_child is None:
            return True
        return False

    def add_left_child(self, value: Any) -> None:
        if self.left_child is None:
            self.left_child = BinaryNode(value)

    def add_right_child(self, value: Any) -> None:
        if self.right_child is None:
            self.right_child = BinaryNode(value)

    def traverse_in_order(self, visit: Callable[[Any], None]) -> None:
        if self.left_child is not None:
            self.left_child.traverse_in_order(visit)
        visit(self.value)
        if self.right_child is not None:
            self.right_child.traverse_in_order(visit)

    def traverse_post_order(self, visit: Callable[[Any], None]) -> None:
        if self.left_child is not None:
            self.left_child.traverse_post_order(visit)
        if self.right_child is not None:
            self.right_child.traverse_post_order(visit)
        visit(self.value)

    def traverse_pre_order(self, visit: Callable[[Any], None]) -> None:
        visit(self.value)
        if self.left_child is not None:
            self.left_child.traverse_pre_order(visit)
        if self.right_child is not None:
            self.right_child.traverse_pre_order(visit)

class BinaryTree:
    root: BinaryNode

    def __init__(self, value: Any):
        self.root = BinaryNode(value)

    def traverse_in_order(self, visit: Callable[[Any], None]) -> None:
        self.root.traverse_in_order(visit)

    def traverse_post_order(self, visit: Callable[[Any], None]) -> None:
        self.root.traverse_post_order(visit)

    def traverse_pre_order(self, visit: Callable[[Any], None]) -> None:
        self.root.traverse_pre_order(visit)

    def printT(self, node: BinaryNode, level=0) -> None:
        if node != None:
            self.printT(node.right_child, level + 1)
            if level == 0:
                print(' ', node.value)
            else:
                print(' ' * 4 * level + '->', node.value)
            self.printT(node.left_child, level + 1)
def level_p(node: BinaryNode) -> int:
    level = 0
    while node.right_child is not None:
        level += 1
        node = node.right_child
    return level

def liscie(node: BinaryNode)

def right_line(node: BinaryNode) -> List[BinaryNode]:
    lista = []
    level = 0
    zas_pr = level_p(node)
    while level <= zas_pr:
        level += 1
        lista.append(node)
        node = node.right_child



# czy ma w lini prawej wartości na danym levelu
#   jeśli tak dodaj do listy prawe dziecko z prawej lini
#   jeśli nie dodaj prawe dziecko z lewej lini
#jeśli linia prawa się skończyła przeszukaj drzewo w lini lewej



tree = BinaryTree(1)
tree.root.add_right_child(3)
tree.root.right_child.add_right_child(7)
tree.root.add_left_child(2)
tree.root.left_child.add_left_child(4)
tree.root.left_child.add_right_child(5)
tree.root.left_child.left_child.add_left_child(8)
tree.root.left_child.left_child.add_right_child(9)
tree.printT(tree.root)
right_line(tree.root)
